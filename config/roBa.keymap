#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

// #define MOUSE 4
#define SCROLL 5
#define NUM 6
#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

// key positions
// 00 01 02 03 04|         |05 06 07 08 09 
// 10 11 12 13 14|15|   |16|17 18 19 20 21
// 22 23 24 25 26|27|   |28|29 30 31 32 33
// 34 35 35|37 38 39|   |40 41|         42
/ {
    combos {
        compatible = "zmk,combos";

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <18 19>;
            layers = <0 1 3>;
        };

        shift_enter {
            bindings = <&kp LS(ENTER)>;
            key-positions = <17 18>;
            layers = <0 3 1>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <6 7>;
            layers = <0 3 1>;
        };

        back_space {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 8>;
            layers = <0 1 3>;
        };

        close_window {
            bindings = <&kp LA(F4)>;
            key-positions = <0 9>;
        };

        cap_word {
            bindings = <&caps_word>;
            key-positions = <40 21>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        alt_tab: macro_alt_tab_hold {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = 
                <&macro_press &kp LEFT_ALT>,
                <&macro_tap &kp TAB>;
            label = "ALT_TAB_HOLD";
        };

        ctrl_tab: macro_ctrl_tab_hold {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = 
                <&macro_press &kp LEFT_CONTROL>,
                <&macro_tap &kp TAB>;
            label = "CTRL_TAB_HOLD";
        };       
     
        mo_release_ac: mo_release_ac {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = 
                <&macro_param_1to1>,
                <&macro_press &mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_ALT &kp LEFT_CONTROL &kp LEFT_ALT &kp LEFT_CONTROL &kp LEFT_ALT &kp LEFT_CONTROL &kp LEFT_ALT &kp LEFT_CONTROL &kp LEFT_ALT &kp LEFT_CONTROL &kp LEFT_ALT &kp LEFT_CONTROL &kp LEFT_ALT &kp LEFT_CONTROL 
                 &kp LEFT_ALT &kp LEFT_CONTROL &kp LEFT_ALT &kp LEFT_CONTROL &kp LEFT_ALT &kp LEFT_CONTROL &kp LEFT_ALT &kp LEFT_CONTROL>,
                <&macro_param_1to1>,
                <&macro_release &mo MACRO_PLACEHOLDER>;
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        lang1_lang2: lang1_lang2 {
            compatible = "zmk,behavior-tap-dance";
            label = "LANG1_LANG2";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LANGUAGE_2>, <&kp LANGUAGE_1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q       &kp W         &kp E         &kp R               &kp T                                                             &kp Y  &kp U  &kp I     &kp O  &kp P
&kp A       &kp S         &kp D         &kp F               &kp G                 &mo 6               &lt_to_layer_0 2 ENTER  &kp H  &kp J  &kp K     &kp L  &kp MINUS
&mt LSHFT Z &kp X         &kp C         &kp V               &kp B                 &kp LEFT_SHIFT      &lang1_lang2            &kp N  &kp M  &mkp MB1  &mo 5  &mt LCTRL SEMI
&kp ESCAPE  &kp LEFT_WIN  &kp LEFT_ALT  &mo_release_ac 3   &mt LEFT_SHIFT COMMA  &mt LCTRL DOT       &mt LEFT_SHIFT SPACE    &mo 1                          &kp LEFT_GUI
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        Number {
            bindings = <
&trans        &kp PIPE      &kp BACKSLASH  &kp TILDE     &kp GRAVE                      &kp DOUBLE_QUOTES   &kp MINUS       &kp PLUS      &kp EQUAL     &kp SINGLE_QUOTE
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3   &kp NUMBER_4  &kp N5     &trans      &trans  &kp NUMBER_6        &kp NUMBER_7    &kp NUMBER_8  &kp NUMBER_9  &kp N0
&kp EXCL      &kp AT        &kp HASH       &kp DLLR      &kp PRCNT  &trans      &trans  &kp CARET           &kp AMPERSAND   &kp ASTERISK  &kp FSLH      &kp QMARK
&trans        &trans        &trans         &trans        &trans     &trans      &trans  &trans                                                       &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(K_SCROLL_UP) LC(K_SCROLL_DOWN)>;
        };

        Function {
            bindings = <
&kp LA(LC(DELETE))  &trans  &trans  &trans  &kp LC(LS(ESC))                    &kp C_VOL_DN  &kp C_VOLUME_UP  &trans        &trans          &kp PRINTSCREEN
&trans              &trans  &trans  &trans  &trans                 &trans      &trans  &trans        &trans           &trans        &trans          &trans
&trans              &trans  &trans  &trans  &trans                 &trans      &trans  &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3    &bt BT_SEL 4
&trans              &trans  &trans  &trans  &trans                 &trans      &trans  &trans                                                       &trans
            >;
        };

        Move {
            bindings = <
&kp HOME        &kp LC(LEFT_ARROW)  &kp UP_ARROW        &kp LC(RIGHT)    &kp END                                  &trans            &kp LBRC          &kp RBRC           &kp LT    &kp GT
&kp TAB         &kp LEFT_ARROW      &kp DOWN_ARROW      &kp RIGHT_ARROW  &kp LS(TAB)  &trans      &trans          &trans            &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LPAR  &kp RPAR
&kp LEFT_SHIFT  &kp LS(LC(TAB))     &alt_tab            &ctrl_tab        &trans       &trans      &kp LEFT_ALT    &trans            &trans            &trans             &trans    &trans
&trans          &trans              &trans              &trans           &trans       &trans      &kp LEFT_SHIFT  &kp LEFT_CONTROL                                                 &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        Mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        Scroll {
            bindings = <
&trans          &kp F7  &kp F8  &kp F9  &kp F10                        &trans    &trans  &trans    &trans  &trans
&kp PAGE_UP     &kp F4  &kp F5  &kp F6  &kp F11  &trans      &trans    &trans    &trans  &trans    &trans  &trans
&kp PAGE_DOWN   &kp F1  &kp F2  &kp F2  &kp F12  &trans      &trans    &trans    &trans  &mkp MB2  &trans  &mkp MB3
&trans          &trans  &trans  &trans  &trans   &trans      &kp LA(LEFT_ARROW)  &kp LA(RIGHT_ARROW)       &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans      &trans                               &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &mkp MB3    &mkp MB2    &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans      &trans      &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans      &trans      &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
